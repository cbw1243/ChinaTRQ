UKRRatio = M_UKR_Pr/M_UKR_IntlPrice)
UKRRatioMean <- mean(dplyr::filter(UnrestrictDat, M_UKR_Impute == 0)$UKRRatio)
UnrestrictDat <- mutate(UnrestrictDat, M_UKR_Pr = ifelse(M_UKR_Impute == 1, UKRRatioMean*M_UKR_IntlPrice, M_UKR_Pr))
PriceNames <- c("M_USA_Pr", "M_UKR_Pr", "M_RES_Pr",
"R_THI_Pr", "R_VIN_Pr", "R_PAK_Pr", "R_RES_Pr",
"W_USA_Pr", "W_AUS_Pr", "W_CAN_Pr", "W_RES_Pr")
ShareNames <- c("M_USA_EShare", "M_UKR_EShare", "M_RES_EShare",
"R_THI_EShare", "R_VIN_EShare", "R_PAK_EShare", "R_RES_EShare",
"W_USA_EShare", "W_AUS_EShare", "W_CAN_EShare", "W_RES_EShare")
basePrice <- list(shares = colMeans(UnrestrictDat[, ShareNames]),
prices = colMeans(UnrestrictDat[, PriceNames])) # Base shares and base prices.
PriceIndexName <- 'Ls'
PriceIndex <- micEconAids::aidsPx(PriceIndexName, PriceNames, shareNames = ShareNames,
data = UnrestrictDat, base = basePrice)
# Base share is the first row of observation in the micEcon package. I change it to average shares.
UnrestrictDat$PriceIndex <- as.numeric(log(UnrestrictDat[['Exp']]) - PriceIndex)
# Alternative specification with dummies
eq1 <- M_USA_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + M_UKR_Impute + UKR_Dummy + factor(Quarter)
eq2 <- M_UKR_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + M_UKR_Impute + UKR_Dummy + factor(Quarter)
eq3 <- M_RES_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + M_UKR_Impute + UKR_Dummy + factor(Quarter)
eq4 <- R_THI_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq5 <- R_VIN_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq6 <- R_PAK_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq7 <- R_RES_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq8 <- W_USA_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq9 <- W_AUS_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq10 <- W_CAN_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
# Homogeneity Restriction plus Symmetry Restriction.
# Sum of Gamma is zero for each equation.
ResMatHomo <- c('eq1_log(M_USA_Pr) + eq1_log(M_UKR_Pr) + eq1_log(M_RES_Pr) + eq1_log(R_THI_Pr) + eq1_log(R_VIN_Pr) +
eq1_log(R_PAK_Pr) + eq1_log(R_RES_Pr) + eq1_log(W_USA_Pr) + eq1_log(W_AUS_Pr) + eq1_log(W_CAN_Pr) + eq1_log(W_RES_Pr) = 0',
'eq2_log(M_USA_Pr) + eq2_log(M_UKR_Pr) + eq2_log(M_RES_Pr) + eq2_log(R_THI_Pr) + eq2_log(R_VIN_Pr) +
eq2_log(R_PAK_Pr) + eq2_log(R_RES_Pr) + eq2_log(W_USA_Pr) + eq2_log(W_AUS_Pr) + eq2_log(W_CAN_Pr) + eq2_log(W_RES_Pr) = 0',
'eq3_log(M_USA_Pr) + eq3_log(M_UKR_Pr) + eq3_log(M_RES_Pr) + eq3_log(R_THI_Pr) + eq3_log(R_VIN_Pr) +
eq3_log(R_PAK_Pr) + eq3_log(R_RES_Pr) + eq3_log(W_USA_Pr) + eq3_log(W_AUS_Pr) + eq3_log(W_CAN_Pr) + eq3_log(W_RES_Pr) = 0',
'eq4_log(M_USA_Pr) + eq4_log(M_UKR_Pr) + eq4_log(M_RES_Pr) + eq4_log(R_THI_Pr) + eq4_log(R_VIN_Pr) +
eq4_log(R_PAK_Pr) + eq4_log(R_RES_Pr) + eq4_log(W_USA_Pr) + eq4_log(W_AUS_Pr) + eq4_log(W_CAN_Pr) + eq4_log(W_RES_Pr) = 0',
'eq5_log(M_USA_Pr) + eq5_log(M_UKR_Pr) + eq5_log(M_RES_Pr) + eq5_log(R_THI_Pr) + eq5_log(R_VIN_Pr) +
eq5_log(R_PAK_Pr) + eq5_log(R_RES_Pr) + eq5_log(W_USA_Pr) + eq5_log(W_AUS_Pr) + eq5_log(W_CAN_Pr) + eq5_log(W_RES_Pr) = 0',
'eq6_log(M_USA_Pr) + eq6_log(M_UKR_Pr) + eq6_log(M_RES_Pr) + eq6_log(R_THI_Pr) + eq6_log(R_VIN_Pr) +
eq6_log(R_PAK_Pr) + eq6_log(R_RES_Pr) + eq6_log(W_USA_Pr) + eq6_log(W_AUS_Pr) + eq6_log(W_CAN_Pr) + eq6_log(W_RES_Pr) = 0',
'eq7_log(M_USA_Pr) + eq7_log(M_UKR_Pr) + eq7_log(M_RES_Pr) + eq7_log(R_THI_Pr) + eq7_log(R_VIN_Pr) +
eq7_log(R_PAK_Pr) + eq7_log(R_RES_Pr) + eq7_log(W_USA_Pr) + eq7_log(W_AUS_Pr) + eq7_log(W_CAN_Pr) + eq7_log(W_RES_Pr) = 0',
'eq8_log(M_USA_Pr) + eq8_log(M_UKR_Pr) + eq8_log(M_RES_Pr) + eq8_log(R_THI_Pr) + eq8_log(R_VIN_Pr) +
eq8_log(R_PAK_Pr) + eq8_log(R_RES_Pr) + eq8_log(W_USA_Pr) + eq8_log(W_AUS_Pr) + eq8_log(W_CAN_Pr) + eq8_log(W_RES_Pr) = 0',
'eq9_log(M_USA_Pr) + eq9_log(M_UKR_Pr) + eq9_log(M_RES_Pr) + eq9_log(R_THI_Pr) + eq9_log(R_VIN_Pr) +
eq9_log(R_PAK_Pr) + eq9_log(R_RES_Pr) + eq9_log(W_USA_Pr) + eq9_log(W_AUS_Pr) + eq9_log(W_CAN_Pr) + eq9_log(W_RES_Pr) = 0',
'eq10_log(M_USA_Pr) + eq10_log(M_UKR_Pr) + eq10_log(M_RES_Pr) + eq10_log(R_THI_Pr) + eq10_log(R_VIN_Pr) +
eq10_log(R_PAK_Pr) + eq10_log(R_RES_Pr) + eq10_log(W_USA_Pr) + eq10_log(W_AUS_Pr) + eq10_log(W_CAN_Pr) + eq10_log(W_RES_Pr) = 0')
# Above for homogeneity; below for symmestry.
ResMatSym <- c('eq1_log(M_UKR_Pr) - eq2_log(M_USA_Pr) = 0',
'eq1_log(M_RES_Pr) - eq3_log(M_USA_Pr) = 0',
'eq1_log(R_THI_Pr) - eq4_log(M_USA_Pr) = 0',
'eq1_log(R_VIN_Pr) - eq5_log(M_USA_Pr) = 0',
'eq1_log(R_PAK_Pr) - eq6_log(M_USA_Pr) = 0',
'eq1_log(R_RES_Pr) - eq7_log(M_USA_Pr) = 0',
'eq1_log(W_USA_Pr) - eq8_log(M_USA_Pr) = 0',
'eq1_log(W_AUS_Pr) - eq9_log(M_USA_Pr) = 0',
'eq1_log(W_CAN_Pr) - eq10_log(M_USA_Pr) = 0',
'eq2_log(M_RES_Pr) - eq3_log(M_UKR_Pr) = 0',
'eq2_log(R_THI_Pr) - eq4_log(M_UKR_Pr) = 0',
'eq2_log(R_VIN_Pr) - eq5_log(M_UKR_Pr) = 0',
'eq2_log(R_PAK_Pr) - eq6_log(M_UKR_Pr) = 0',
'eq2_log(R_RES_Pr) - eq7_log(M_UKR_Pr) = 0',
'eq2_log(W_USA_Pr) - eq8_log(M_UKR_Pr) = 0',
'eq2_log(W_AUS_Pr) - eq9_log(M_UKR_Pr) = 0',
'eq2_log(W_CAN_Pr) - eq10_log(M_UKR_Pr) = 0',
'eq3_log(R_THI_Pr) - eq4_log(M_RES_Pr) = 0',
'eq3_log(R_VIN_Pr) - eq5_log(M_RES_Pr) = 0',
'eq3_log(R_PAK_Pr) - eq6_log(M_RES_Pr) = 0',
'eq3_log(R_RES_Pr) - eq7_log(M_RES_Pr) = 0',
'eq3_log(W_USA_Pr) - eq8_log(M_RES_Pr) = 0',
'eq3_log(W_AUS_Pr) - eq9_log(M_RES_Pr) = 0',
'eq3_log(W_CAN_Pr) - eq10_log(M_RES_Pr) = 0',
'eq4_log(R_VIN_Pr) - eq5_log(R_THI_Pr) = 0',
'eq4_log(R_PAK_Pr) - eq6_log(R_THI_Pr) = 0',
'eq4_log(R_RES_Pr) - eq7_log(R_THI_Pr) = 0',
'eq4_log(W_USA_Pr) - eq8_log(R_THI_Pr) = 0',
'eq4_log(W_AUS_Pr) - eq9_log(R_THI_Pr) = 0',
'eq4_log(W_CAN_Pr) - eq10_log(R_THI_Pr) = 0',
'eq5_log(R_PAK_Pr) - eq6_log(R_VIN_Pr) = 0',
'eq5_log(R_RES_Pr) - eq7_log(R_VIN_Pr) = 0',
'eq5_log(W_USA_Pr) - eq8_log(R_VIN_Pr) = 0',
'eq5_log(W_AUS_Pr) - eq9_log(R_VIN_Pr) = 0',
'eq5_log(W_CAN_Pr) - eq10_log(R_VIN_Pr) = 0',
'eq6_log(R_RES_Pr) - eq7_log(R_PAK_Pr) = 0',
'eq6_log(W_USA_Pr) - eq8_log(R_PAK_Pr) = 0',
'eq6_log(W_AUS_Pr) - eq9_log(R_PAK_Pr) = 0',
'eq6_log(W_CAN_Pr) - eq10_log(R_PAK_Pr) = 0',
'eq7_log(W_USA_Pr) - eq8_log(R_RES_Pr) = 0',
'eq7_log(W_AUS_Pr) - eq9_log(R_RES_Pr) = 0',
'eq7_log(W_CAN_Pr) - eq10_log(R_RES_Pr) = 0',
'eq8_log(W_AUS_Pr) - eq9_log(W_USA_Pr) = 0',
'eq8_log(W_CAN_Pr) - eq10_log(W_USA_Pr) = 0',
'eq9_log(W_CAN_Pr) - eq10_log(W_AUS_Pr) = 0')
ExtraRes <- c('eq1_M_UKR_Impute + eq2_M_UKR_Impute + eq3_M_UKR_Impute = 0',
'eq1_UKR_Dummy + eq2_UKR_Dummy + eq3_UKR_Dummy + eq4_UKR_Dummy + eq5_UKR_Dummy + eq6_UKR_Dummy + eq7_UKR_Dummy + eq8_UKR_Dummy + eq9_UKR_Dummy + eq10_UKR_Dummy = 0')
# Non-restricted regression.
AIDSEst <- systemfit(formula = list(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9, eq10),
data = UnrestrictDat, method = 'SUR',
#restrict.matrix = ExtraRes,
control = systemfit.control(maxiter = 100))
# Restricted regression.
AIDSEstRes <- systemfit(formula = list(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9, eq10),
data = UnrestrictDat, method = 'SUR',
restrict.matrix = c(ResMatHomo, ResMatSym, ExtraRes),
control = systemfit.control(maxiter = 100))
summary(AIDSEstRes)
# DW critical value for 9 regressors and 45 obs, 95% (1.1, 2.0)
for (i in 1:10){
test <- AIDSEstRes$eq[[i]]$residuals
cat(sum((test-dplyr::lag(test))^2, na.rm = TRUE)/sum(test^2),'%%')
print(coefficients(lm(test~dplyr::lag(test)))[2])
}
NumEqs <- 10 + 1
# Get elasticities.
CoefEst <- GetCoef(AIDSEst)
CoefEstRes <- GetCoef(AIDSEstRes)
AggShareDat <- UnrestrictDat %>%
dplyr::select(Time, ShareNames, Exp) %>%
dplyr::filter(year(Time) >= 2013) %>%
dplyr::select(-Time) %>%
colMeans()
SubShareDat <- fread('../Data/0_RegressionDatSource_long_clean_Update2018.csv', stringsAsFactors = FALSE) %>%
dplyr::filter(!(Commodity == 'Maize' & Country == 'Others')) %>%
mutate(Time = as.Date(Time, format = '%Y-%m-%d')) %>%
group_by(Commodity, Time) %>%
mutate(Share =  Value/sum(Value)) %>%
ungroup() %>%
mutate(Commodity = substr(Commodity, 1, 1)) %>%
dplyr::filter(year(Time) > 2012) %>%
dplyr::select(Commodity, Time, Country, Share) %>%
unite(temp, Commodity, Country) %>%
mutate(temp = paste0(temp, '_EShare')) %>%
spread(temp, Share) %>%
dplyr::select(Time, ShareNames) %>%
as.data.frame() %>%
dplyr::filter(year(Time) >= 2013) %>%
dplyr::select(-Time) %>%
colMeans()
test1 <- GetElasCorrect10Eqs(ShareNames = ShareNames, CoefEst = CoefEstRes, AggShare = AggShareDat[ShareNames],
SubShare = SubShareDat, e1= -257.8*1000000/AggShareDat[NumEqs+1], b1 = c(-0.16, -0.79, -1.01), BaseShare = basePrice$shares)
test2 <- GetElasCorrect10Eqs(ShareNames = ShareNames, CoefEst = CoefEstRes, AggShare = AggShareDat[ShareNames],
SubShare = SubShareDat, e1= -257.8*1000000/AggShareDat[NumEqs+1], b1 = c(0, 0, 0), BaseShare = basePrice$shares)
diag(test1)
diag(test2)
# Simulate for the standard deviations.
library(mvtnorm)
nSim <- 5000
set.seed(1992)
ParaSim <- rmvnorm(n=nSim, mean=coef(AIDSEstRes), sigma=vcov(AIDSEstRes), method = 'svd')
CoefSim <- lapply(1:nSim, function(i) GetCoef(ParaSim[i,], sim = TRUE))
# Get coefficients.
test <- lapply(CoefSim, '[[', 3)
gammaM <- data.frame(matrix(NA, NumEqs, NumEqs))
for (i in 1:NumEqs){
for (j in 1:NumEqs){
gammaM[i,j] <- round(mean(unlist(lapply(test, '[[', i, j))), 2)
}
}
gammaMSd <- data.frame(matrix(NA, NumEqs, NumEqs))
for (i in 1:NumEqs){
for (j in 1:NumEqs){
gammaMSd[i,j] <- paste0('(', round(sd(unlist(lapply(test, '[[', i, j))), 2), ')')
}
}
gammaTex <- data.frame(matrix(NA, NumEqs*2, NumEqs))
gammaTex[seq(1, NumEqs*2, 2), ] <- gammaM
gammaTex[seq(2, NumEqs*2, 2), ] <- gammaMSd
row.names(gammaTex) <- c('Log price of1', 'USA maize', 'Log price of2', 'UKR maize', 'Log price of3', 'ROW maize', 'Log price of4', 'THI rice', 'Log price of5', 'VIN rice',
'Log price of6', 'PAK rice', 'Log price of7', 'ROW rice', 'Log price of8', 'USA wheat', 'Log price of9', 'AUS wheat', 'Log price of10', 'CAN wheat',
'Log price of11', 'ROW wheat')
colnames(gammaTex) <- c('USA', 'UKR', 'RES', 'THI', 'VIN', 'PAK', 'RES', 'USA', 'AUS', 'CAN', 'RES')
stargazer(gammaTex, summary = FALSE, rownames = T)
test2 <- lapply(CoefSim, '[[', 2)
betaImputeTex <- data.frame(matrix(NA, 2, NumEqs))
for (i in 1:NumEqs){
betaImputeTex[1,i] <- round(mean(unlist(lapply(test2, '[[', i))), 2)
}
for (i in 1:NumEqs){
betaImputeTex[2,i] <- paste0('(', round(sd(unlist(lapply(test2, '[[', i))), 2), ')')
}
stargazer(betaImputeTex, summary = FALSE, rownames = T)
# Restricted
ElasSim1 <- lapply(1:nSim, function(i) GetElasCorrect10Eqs(ShareNames, CoefSim[[i]], AggShare = AggShareDat[ShareNames],
SubShare = SubShareDat, e1= -257.8*1000000/AggShareDat[NumEqs+1], b1 = c(-0.16, -0.79, -1.01), BaseShare = basePrice$shares))
# Unrestricted
ElasSim2 <- lapply(1:nSim, function(i) GetElasCorrect10Eqs(ShareNames, CoefSim[[i]], AggShare = AggShareDat[ShareNames],
SubShare = SubShareDat, e1= -257.8*1000000/AggShareDat[NumEqs+1], b1 = c(0, 0, 0), BaseShare = basePrice$shares))
# SD of Price Elasticity
#PriceElasSim1 <- lapply(ElasSim1, '[[', 1)
PriceElasMean1 <- matrix(sapply(1:NumEqs^2, function(i) mean(unlist(lapply(ElasSim1, '[[', i)))), NumEqs, NumEqs)
PriceElasSd1 <- matrix(sapply(1:NumEqs^2, function(i) sd(unlist(lapply(ElasSim1, '[[', i)))), NumEqs, NumEqs)
PriceElasPvalue1 <- matrix(sapply(1:NumEqs^2, function(i) 2*pt(-abs(PriceElasMean1[i]/PriceElasSd1[i]), df = AIDSEstRes$eq[[1]]$df.residual)), NumEqs, NumEqs)
#PriceElasSim2 <- lapply(ElasSim2, '[[', 1)
PriceElasMean2 <- matrix(sapply(1:NumEqs^2, function(i) mean(unlist(lapply(ElasSim2, '[[', i)))), NumEqs, NumEqs)
PriceElasSd2 <- matrix(sapply(1:NumEqs^2, function(i) sd(unlist(lapply(ElasSim2, '[[', i)))), NumEqs, NumEqs)
PriceElasPvalue2 <- matrix(sapply(1:NumEqs^2, function(i) 2*pt(-abs(PriceElasMean2[i]/PriceElasSd2[i]), df = AIDSEstRes$eq[[1]]$df.residual)), NumEqs, NumEqs)
IDNames <- c('Maize-USA', 'Maize-Ukraine', 'Maize-RES','Rice-Thailand', 'Rice-VietNam', 'Rice-Pakistan', 'Rice-RES', 'Wheat-USA', 'Wheat-Australia', 'Wheat-Canada', 'Wheat-RES')
ElasOutM <- data.frame(matrix(NA, NumEqs, 3)) %>%
'colnames<-'(c('ID', 'Elas1', 'Elas2')) %>%
mutate(ID = IDNames,
Elas1 = diag(PriceElasMean1), Elas2 = diag(PriceElasMean2)) %>%
gather(Variable, Elas, 2:3)
ElasOut <- data.frame(matrix(NA, NumEqs, 3)) %>%
'colnames<-'(c('ID', 'Elas1', 'Elas2')) %>%
mutate(ID = IDNames,
Elas1 = diag(PriceElasSd1),
Elas2 = diag(PriceElasSd2)) %>%
gather(Variable, ElasSd, 2:3) %>%
left_join(., ElasOutM, by = c('ID', 'Variable'))
gelas <-
ggplot(data = ElasOut) +
geom_bar(aes(ID, Elas, fill = Variable), position = position_dodge(), stat = 'identity') +
geom_text(aes(ID, 0.1, label = round(Elas, 1), group = Variable), position = position_dodge(width = 0.8), size = 3.5, vjust = 0.1) +
geom_errorbar(aes(ID, ymin = (Elas- 1.692*ElasSd), ymax = (Elas+ 1.692*ElasSd), group = Variable),
position = position_dodge(width = 0.8), width = 0.15) +
theme_classic() +
labs(x = '', y = 'Own price elasticity of import demand') +
scale_fill_manual(values = c("grey", "grey40"),
breaks = c('Elas1', 'Elas2'),
labels = c('Restricted', 'Unrestricted')) +
scale_y_continuous(breaks = seq(3, -7, by = -1)) +
scale_x_discrete(limits = IDNames,
labels = c('Maize-Ukraine' = 'Ukraine', 'Maize-USA' = 'U.S.', 'Maize-RES' = 'ROW',
'Rice-Pakistan' = 'Pakistan', 'Rice-Thailand' = 'Thailand', 'Rice-RES' = 'ROW',
'Rice-VietNam' = 'Vietnam', 'Wheat-Australia' = 'Australia', 'Wheat-RES' = 'ROW',
'Wheat-Canada' = 'Canada', 'Wheat-USA' = 'U.S.')) +
theme(legend.title = element_blank(),
legend.position = 'bottom',
legend.text = element_text(color = 'black', size = 12, face = 'plain'),
axis.text = element_text(color = 'black', size = 12, face = 'plain'),
axis.title.y = element_text(color = 'black', size = 12, face = 'plain')) +
annotate("text", label ='Maize', x = 2, y = 2, color = "black", size = 4) +
annotate("segment", x = 0.5, xend = 3.5, y = 1.8, yend = 1.8, color = "black", size = 0.5, arrow=arrow(length = unit(0.1, 'inches'), ends = "both")) +
annotate("text", label ='Rice', x = 5.5, y = 2, color = "black", size = 4) +
annotate("segment", x = 3.6, xend = 7.4, y = 1.8, yend = 1.8, color = "black", size = 0.5, arrow=arrow(length = unit(0.1, 'inches'), ends = "both")) +
annotate("text", label ='Wheat', x = 9.5, y = 2, color = "black", size = 4) +
annotate("segment", x = 7.6, xend = 11.4, y = 1.8, yend = 1.8, color = "black", size = 0.5, arrow=arrow(length = unit(0.1, 'inches'), ends = "both"))
gelas
ggsave('Fig_ElasEst_TheoryResRev2.png', gelas, width = 220, height = 160, units = 'mm')
# Weighted sum of price elasticity
AveElas <- c(weighted.mean(diag(PriceElasMean2)[1:3], SubShareDat[1:3]), weighted.mean(diag(PriceElasMean2)[4:7], SubShareDat[4:7]),
weighted.mean(diag(PriceElasMean2)[8:11], SubShareDat[8:11]))
AveElasSd <- c(weighted.mean(diag(PriceElasSd2)[1:3], SubShareDat[1:3]), weighted.mean(diag(PriceElasSd2)[4:7], SubShareDat[4:7]),
weighted.mean(diag(PriceElasSd2)[8:11], SubShareDat[8:11]))
#---------------------------------------------------------------------------------------------------------------------------------------------#
# Project the import demand without the import protections.
#---------------------------------------------------------------------------------------------------------------------------------------------#
PriceGap15 <- PriceGap %>%
dplyr::filter(year(Time) == 2017) %>%
group_by(Commodity) %>%
summarise(GapRatio = mean(GapRatio)) %>%
mutate(GapRatio = 100/GapRatio - 1) # domestic price is at denominator.
Quant15 <- RegDat %>%
dplyr::filter(year(Time) == 2017) %>%
dplyr::select(gsub("EShare", "QT", ShareNames)) %>%
colSums()
PriceGap15M <- matrix(c(rep(PriceGap15$GapRatio[1], 3), rep(PriceGap15$GapRatio[2], 4), rep(PriceGap15$GapRatio[3], 4)), 11, 1)
Quant15Proj <- lapply(1:nSim, function(i) (ElasSim2[[i]] %*% PriceGap15M + 1)*Quant15)
Quant15ProjMean <- sapply(1:NumEqs, function(i) mean(unlist(lapply(Quant15Proj, '[[', i))))
Quant15ProjSd <- sapply(1:NumEqs, function(i) sd(unlist(lapply(Quant15Proj, '[[', i))))
QuantProjVis <-  data.frame(Source = gsub("EShare", "QT", ShareNames),
Base = Quant15/1000000, Mean = Quant15ProjMean/1000000, # in million tonnes
Sd = Quant15ProjSd/1000000) %>%
gather(Scenario, Value, 2:3) %>%
mutate(Country = substr(Source, 3, 5),
Commodity = substr(Source, 1, 1),
Sd = ifelse(Scenario == 'Base', 0, Sd))
ValueProjVis <- UnrestrictDat %>%
dplyr::filter(year(Time) == 2017) %>%
dplyr::select(contains('VA')) %>%
colSums() %>%
as.data.frame() %>%
'colnames<-'(c('ObsValue')) %>%
mutate(Country = substr(row.names(.), 3, 5),
Commodity = substr(row.names(.), 1, 1)) %>%
right_join(., QuantProjVis, by = c('Country', 'Commodity')) %>%
mutate(AvePrice = ObsValue/(1000000*Value))
ValueProjVis[(NumEqs+1):nrow(ValueProjVis), 'AvePrice'] <- ValueProjVis[1:NumEqs, 'AvePrice']
ValueProjVis <- ValueProjVis %>%
mutate(ImportV = Value*AvePrice)
label_size <- 12
g <-
ValueProjVis %>%
mutate(Source = case_when(Source == 'M_UKR_QT' ~ 'Maize-Ukraine',
Source == 'M_USA_QT' ~ 'Maize-USA',
Source == 'M_RES_QT' ~ 'Maize-RES',
Source == 'R_PAK_QT' ~ 'Rice-Pakistan',
Source == 'R_THI_QT' ~ 'Rice-Thailand',
Source == 'R_VIN_QT' ~ 'Rice-VietNam',
Source == 'R_RES_QT' ~ 'Rice-RES',
Source == 'W_AUS_QT' ~ 'Wheat-Australia',
Source == 'W_CAN_QT' ~ 'Wheat-Canada',
Source == 'W_USA_QT' ~ 'Wheat-USA',
Source == 'W_RES_QT' ~ 'Wheat-RES')) %>%
ggplot(data = .) +
geom_bar(mapping = aes(Source, ImportV, fill = Scenario),
stat = 'identity',
position = position_dodge(width = NULL)) +
geom_text(aes(Source, 40,label = round(ImportV, 0), group = Scenario),
position = position_dodge(0.9)) +
geom_errorbar(aes(x= Source, ymin=ImportV-1.692*Sd*AvePrice, ymax=ImportV+1.692*Sd*AvePrice, group = Scenario),
colour="black", width=.15, size = 0.4,
position = position_dodge(0.9)) +
scale_fill_manual(values = c('Base' = 'grey', 'Mean' = "grey40"),
breaks = c("Base", "Mean"),
labels = c("Observed", "Simulated")) +
theme_classic() +
scale_y_continuous(limits = c(0, 1500), breaks = seq(0, 1500, by = 300)) +
theme(legend.title = element_blank(),
legend.position = 'bottom',
legend.direction = 'horizontal',
axis.title = element_text(size = label_size, colour = 'black'),
axis.text = element_text(size = label_size, colour = 'black'),
legend.text = element_text(size = label_size, colour = 'black'),
plot.margin = margin(1,0,0,0, unit = 'cm')) +
labs(x = '', y = 'Import value, million USD') +
scale_x_discrete(limits = IDNames,
labels = c('Maize-Ukraine' = 'Ukraine', 'Maize-USA' = 'U.S.', 'Maize-RES' = 'ROW',
'Rice-Pakistan' = 'Pakistan', 'Rice-Thailand' = 'Thailand',  'Rice-RES' = 'ROW',
'Rice-VietNam' = 'Vietnam', 'Wheat-Australia' = 'Australia',
'Wheat-Canada' = 'Canada', 'Wheat-USA' = 'U.S.', 'Wheat-RES' = 'ROW')) +
annotate("text", label ='Maize', x = 2, y = 1430, color = "black", size = 4) +
annotate("segment", x = 0.5, xend = 3.4, y = 1400, yend = 1400, color = "black", size = 0.5, arrow=arrow(length = unit(0.1, 'inches'), ends = "both")) +
annotate("text", label ='Rice', x = 5.5, y = 1430, color = "black", size = 4) +
annotate("segment", x = 3.5, xend = 7.4, y = 1400, yend = 1400, color = "black", size = 0.5, arrow=arrow(length = unit(0.1, 'inches'), ends = "both")) +
annotate("text", label ='Wheat', x = 9.5, y = 1430, color = "black", size = 4) +
annotate("segment", x = 7.6, xend = 11.4, y = 1400, yend = 1400, color = "black", size = 0.5, arrow=arrow(length = unit(0.1, 'inches'), ends = "both"))
g
ggsave('Fig_DisAgg_ValueProject_TheoryResRev2.png', g, width = 220, height = 160, units = 'mm')
# Please install the following packages if you do not have them installed.
library(readxl)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(stargazer)
library(micEconAids)
library(tidyr)
library(data.table)
library(AER)
library(plm)
library(imputeTS)
library(systemfit)
library(lfe)
#--------------------------------------------------------------------------------------------------------------------------------#
# Regression: Estimating the Import Demand Equations (Source Differentiated AIDS)
#--------------------------------------------------------------------------------------------------------------------------------#
rm(list=ls())
source('doRepFunc.r')
PriceGap <- fread('../Data/0_Data_PriceGap_Update.csv', stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(paste0(Time, '01'), format = '%Y%m%d')) %>%
dplyr::select(1,2,6) %>%
mutate(GapRatio = ifelse(GapRatio <= 0, 100, 100+GapRatio))
IntlPriceDat <- fread('../Data/0_InlPrice_Clean.csv', stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time, format = '%Y-%m-%d')) %>%
dplyr::rename(IntlPrice = Value)
RegDat <- fread(input = '../Data/0_RegressionDatSource_long_clean_Update2018.csv', stringsAsFactors = FALSE) %>%
mutate(Time = as.Date(Time, format = '%Y-%m-%d')) %>%
left_join(., PriceGap, by = c('Time', 'Commodity')) %>%
left_join(., IntlPriceDat, by = c('Time', 'Commodity', 'Country')) %>%
mutate(ImportPrice = ImportPrice*GapRatio/100) %>%
dplyr::select(-GapRatio) %>%
ungroup() %>%
mutate(Commodity = case_when(Commodity == 'Maize' ~ 'M',
Commodity == 'Rice' ~ 'R',
Commodity == 'Wheat' ~ 'W')) %>%
dplyr::rename(QT = Quantity, VA = Value, Pr = ImportPrice) %>%
group_by(Time) %>%
mutate(EShare = VA/sum(VA)) %>%
gather(variable, value, -(Commodity:Country)) %>%
unite(temp, Commodity, Country, variable) %>%
spread(temp, value) %>%
as.data.frame() %>%
mutate(Exp = ifelse(year(Time) <= 2012, M_USA_VA + R_THI_VA + R_VIN_VA + W_USA_VA + W_AUS_VA + W_CAN_VA,
M_USA_VA + M_UKR_VA + M_RES_VA  + R_THI_VA + R_VIN_VA + R_PAK_VA + R_RES_VA + W_USA_VA + W_AUS_VA + W_CAN_VA + W_RES_VA))
UnrestrictDat <- RegDat %>%
dplyr::filter(year(Time) > 2012) %>%
mutate(UKR_Dummy = ifelse(year(Time) >= 2015, 1, 0),
Month = month(Time),
Quarter = case_when(Month <= 3 ~ 1,
Month > 3 & Month <= 6 ~ 2,
Month > 6 & Month <= 9 ~ 3,
Month > 9 ~ 4),
UKRRatio = M_UKR_Pr/M_UKR_IntlPrice)
UKRRatioMean <- mean(dplyr::filter(UnrestrictDat, M_UKR_Impute == 0)$UKRRatio)
UnrestrictDat <- mutate(UnrestrictDat, M_UKR_Pr = ifelse(M_UKR_Impute == 1, UKRRatioMean*M_UKR_IntlPrice, M_UKR_Pr))
PriceNames <- c("M_USA_Pr", "M_UKR_Pr", "M_RES_Pr",
"R_THI_Pr", "R_VIN_Pr", "R_PAK_Pr", "R_RES_Pr",
"W_USA_Pr", "W_AUS_Pr", "W_CAN_Pr", "W_RES_Pr")
ShareNames <- c("M_USA_EShare", "M_UKR_EShare", "M_RES_EShare",
"R_THI_EShare", "R_VIN_EShare", "R_PAK_EShare", "R_RES_EShare",
"W_USA_EShare", "W_AUS_EShare", "W_CAN_EShare", "W_RES_EShare")
basePrice <- list(shares = colMeans(UnrestrictDat[, ShareNames]),
prices = colMeans(UnrestrictDat[, PriceNames])) # Base shares and base prices.
PriceIndexName <- 'Ls'
PriceIndex <- micEconAids::aidsPx(PriceIndexName, PriceNames, shareNames = ShareNames,
data = UnrestrictDat, base = basePrice)
# Base share is the first row of observation in the micEcon package. I change it to average shares.
UnrestrictDat$PriceIndex <- as.numeric(log(UnrestrictDat[['Exp']]) - PriceIndex)
# Alternative specification with dummies
eq1 <- M_USA_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + M_UKR_Impute + UKR_Dummy + factor(Quarter)
eq2 <- M_UKR_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + M_UKR_Impute + UKR_Dummy + factor(Quarter)
eq3 <- M_RES_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + M_UKR_Impute + UKR_Dummy + factor(Quarter)
eq4 <- R_THI_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq5 <- R_VIN_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq6 <- R_PAK_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq7 <- R_RES_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq8 <- W_USA_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq9 <- W_AUS_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
eq10 <- W_CAN_EShare ~ log(M_USA_Pr) + log(M_UKR_Pr) + log(M_RES_Pr) + log(R_THI_Pr) + log(R_VIN_Pr) + log(R_PAK_Pr) + log(R_RES_Pr) +
log(W_USA_Pr) + log(W_AUS_Pr) + log(W_CAN_Pr) + log(W_RES_Pr) + PriceIndex + UKR_Dummy + factor(Quarter)
# Homogeneity Restriction plus Symmetry Restriction.
# Sum of Gamma is zero for each equation.
ResMatHomo <- c('eq1_log(M_USA_Pr) + eq1_log(M_UKR_Pr) + eq1_log(M_RES_Pr) + eq1_log(R_THI_Pr) + eq1_log(R_VIN_Pr) +
eq1_log(R_PAK_Pr) + eq1_log(R_RES_Pr) + eq1_log(W_USA_Pr) + eq1_log(W_AUS_Pr) + eq1_log(W_CAN_Pr) + eq1_log(W_RES_Pr) = 0',
'eq2_log(M_USA_Pr) + eq2_log(M_UKR_Pr) + eq2_log(M_RES_Pr) + eq2_log(R_THI_Pr) + eq2_log(R_VIN_Pr) +
eq2_log(R_PAK_Pr) + eq2_log(R_RES_Pr) + eq2_log(W_USA_Pr) + eq2_log(W_AUS_Pr) + eq2_log(W_CAN_Pr) + eq2_log(W_RES_Pr) = 0',
'eq3_log(M_USA_Pr) + eq3_log(M_UKR_Pr) + eq3_log(M_RES_Pr) + eq3_log(R_THI_Pr) + eq3_log(R_VIN_Pr) +
eq3_log(R_PAK_Pr) + eq3_log(R_RES_Pr) + eq3_log(W_USA_Pr) + eq3_log(W_AUS_Pr) + eq3_log(W_CAN_Pr) + eq3_log(W_RES_Pr) = 0',
'eq4_log(M_USA_Pr) + eq4_log(M_UKR_Pr) + eq4_log(M_RES_Pr) + eq4_log(R_THI_Pr) + eq4_log(R_VIN_Pr) +
eq4_log(R_PAK_Pr) + eq4_log(R_RES_Pr) + eq4_log(W_USA_Pr) + eq4_log(W_AUS_Pr) + eq4_log(W_CAN_Pr) + eq4_log(W_RES_Pr) = 0',
'eq5_log(M_USA_Pr) + eq5_log(M_UKR_Pr) + eq5_log(M_RES_Pr) + eq5_log(R_THI_Pr) + eq5_log(R_VIN_Pr) +
eq5_log(R_PAK_Pr) + eq5_log(R_RES_Pr) + eq5_log(W_USA_Pr) + eq5_log(W_AUS_Pr) + eq5_log(W_CAN_Pr) + eq5_log(W_RES_Pr) = 0',
'eq6_log(M_USA_Pr) + eq6_log(M_UKR_Pr) + eq6_log(M_RES_Pr) + eq6_log(R_THI_Pr) + eq6_log(R_VIN_Pr) +
eq6_log(R_PAK_Pr) + eq6_log(R_RES_Pr) + eq6_log(W_USA_Pr) + eq6_log(W_AUS_Pr) + eq6_log(W_CAN_Pr) + eq6_log(W_RES_Pr) = 0',
'eq7_log(M_USA_Pr) + eq7_log(M_UKR_Pr) + eq7_log(M_RES_Pr) + eq7_log(R_THI_Pr) + eq7_log(R_VIN_Pr) +
eq7_log(R_PAK_Pr) + eq7_log(R_RES_Pr) + eq7_log(W_USA_Pr) + eq7_log(W_AUS_Pr) + eq7_log(W_CAN_Pr) + eq7_log(W_RES_Pr) = 0',
'eq8_log(M_USA_Pr) + eq8_log(M_UKR_Pr) + eq8_log(M_RES_Pr) + eq8_log(R_THI_Pr) + eq8_log(R_VIN_Pr) +
eq8_log(R_PAK_Pr) + eq8_log(R_RES_Pr) + eq8_log(W_USA_Pr) + eq8_log(W_AUS_Pr) + eq8_log(W_CAN_Pr) + eq8_log(W_RES_Pr) = 0',
'eq9_log(M_USA_Pr) + eq9_log(M_UKR_Pr) + eq9_log(M_RES_Pr) + eq9_log(R_THI_Pr) + eq9_log(R_VIN_Pr) +
eq9_log(R_PAK_Pr) + eq9_log(R_RES_Pr) + eq9_log(W_USA_Pr) + eq9_log(W_AUS_Pr) + eq9_log(W_CAN_Pr) + eq9_log(W_RES_Pr) = 0',
'eq10_log(M_USA_Pr) + eq10_log(M_UKR_Pr) + eq10_log(M_RES_Pr) + eq10_log(R_THI_Pr) + eq10_log(R_VIN_Pr) +
eq10_log(R_PAK_Pr) + eq10_log(R_RES_Pr) + eq10_log(W_USA_Pr) + eq10_log(W_AUS_Pr) + eq10_log(W_CAN_Pr) + eq10_log(W_RES_Pr) = 0')
# Above for homogeneity; below for symmestry.
ResMatSym <- c('eq1_log(M_UKR_Pr) - eq2_log(M_USA_Pr) = 0',
'eq1_log(M_RES_Pr) - eq3_log(M_USA_Pr) = 0',
'eq1_log(R_THI_Pr) - eq4_log(M_USA_Pr) = 0',
'eq1_log(R_VIN_Pr) - eq5_log(M_USA_Pr) = 0',
'eq1_log(R_PAK_Pr) - eq6_log(M_USA_Pr) = 0',
'eq1_log(R_RES_Pr) - eq7_log(M_USA_Pr) = 0',
'eq1_log(W_USA_Pr) - eq8_log(M_USA_Pr) = 0',
'eq1_log(W_AUS_Pr) - eq9_log(M_USA_Pr) = 0',
'eq1_log(W_CAN_Pr) - eq10_log(M_USA_Pr) = 0',
'eq2_log(M_RES_Pr) - eq3_log(M_UKR_Pr) = 0',
'eq2_log(R_THI_Pr) - eq4_log(M_UKR_Pr) = 0',
'eq2_log(R_VIN_Pr) - eq5_log(M_UKR_Pr) = 0',
'eq2_log(R_PAK_Pr) - eq6_log(M_UKR_Pr) = 0',
'eq2_log(R_RES_Pr) - eq7_log(M_UKR_Pr) = 0',
'eq2_log(W_USA_Pr) - eq8_log(M_UKR_Pr) = 0',
'eq2_log(W_AUS_Pr) - eq9_log(M_UKR_Pr) = 0',
'eq2_log(W_CAN_Pr) - eq10_log(M_UKR_Pr) = 0',
'eq3_log(R_THI_Pr) - eq4_log(M_RES_Pr) = 0',
'eq3_log(R_VIN_Pr) - eq5_log(M_RES_Pr) = 0',
'eq3_log(R_PAK_Pr) - eq6_log(M_RES_Pr) = 0',
'eq3_log(R_RES_Pr) - eq7_log(M_RES_Pr) = 0',
'eq3_log(W_USA_Pr) - eq8_log(M_RES_Pr) = 0',
'eq3_log(W_AUS_Pr) - eq9_log(M_RES_Pr) = 0',
'eq3_log(W_CAN_Pr) - eq10_log(M_RES_Pr) = 0',
'eq4_log(R_VIN_Pr) - eq5_log(R_THI_Pr) = 0',
'eq4_log(R_PAK_Pr) - eq6_log(R_THI_Pr) = 0',
'eq4_log(R_RES_Pr) - eq7_log(R_THI_Pr) = 0',
'eq4_log(W_USA_Pr) - eq8_log(R_THI_Pr) = 0',
'eq4_log(W_AUS_Pr) - eq9_log(R_THI_Pr) = 0',
'eq4_log(W_CAN_Pr) - eq10_log(R_THI_Pr) = 0',
'eq5_log(R_PAK_Pr) - eq6_log(R_VIN_Pr) = 0',
'eq5_log(R_RES_Pr) - eq7_log(R_VIN_Pr) = 0',
'eq5_log(W_USA_Pr) - eq8_log(R_VIN_Pr) = 0',
'eq5_log(W_AUS_Pr) - eq9_log(R_VIN_Pr) = 0',
'eq5_log(W_CAN_Pr) - eq10_log(R_VIN_Pr) = 0',
'eq6_log(R_RES_Pr) - eq7_log(R_PAK_Pr) = 0',
'eq6_log(W_USA_Pr) - eq8_log(R_PAK_Pr) = 0',
'eq6_log(W_AUS_Pr) - eq9_log(R_PAK_Pr) = 0',
'eq6_log(W_CAN_Pr) - eq10_log(R_PAK_Pr) = 0',
'eq7_log(W_USA_Pr) - eq8_log(R_RES_Pr) = 0',
'eq7_log(W_AUS_Pr) - eq9_log(R_RES_Pr) = 0',
'eq7_log(W_CAN_Pr) - eq10_log(R_RES_Pr) = 0',
'eq8_log(W_AUS_Pr) - eq9_log(W_USA_Pr) = 0',
'eq8_log(W_CAN_Pr) - eq10_log(W_USA_Pr) = 0',
'eq9_log(W_CAN_Pr) - eq10_log(W_AUS_Pr) = 0')
ExtraRes <- c('eq1_M_UKR_Impute + eq2_M_UKR_Impute + eq3_M_UKR_Impute = 0',
'eq1_UKR_Dummy + eq2_UKR_Dummy + eq3_UKR_Dummy + eq4_UKR_Dummy + eq5_UKR_Dummy + eq6_UKR_Dummy + eq7_UKR_Dummy + eq8_UKR_Dummy + eq9_UKR_Dummy + eq10_UKR_Dummy = 0')
# Non-restricted regression.
AIDSEst <- systemfit(formula = list(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9, eq10),
data = UnrestrictDat, method = 'SUR',
#restrict.matrix = ExtraRes,
control = systemfit.control(maxiter = 100))
# Restricted regression.
AIDSEstRes <- systemfit(formula = list(eq1, eq2, eq3, eq4, eq5, eq6, eq7, eq8, eq9, eq10),
data = UnrestrictDat, method = 'SUR',
restrict.matrix = c(ResMatHomo, ResMatSym, ExtraRes),
control = systemfit.control(maxiter = 100))
summary(AIDSEstRes)
